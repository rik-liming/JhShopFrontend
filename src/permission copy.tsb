import router from './router';
import permissionStore from './store/modules/permission';
import NProgress from 'nprogress'; // progress bar
import 'nprogress/nprogress.css'; // progress bar style
import getPageTitle from '@/utils/get-page-title';
import userStore from './store/modules/user';

NProgress.configure({ showSpinner: false }); // NProgress Configuration

const whiteList = ['/login', '/register', '/auth-redirect']; // no redirect whitelist

router.beforeEach(async (to, from, next) => {
  // console.log('router.beforeEach', to.path, from.path);
  // start progress bar
  NProgress.start();

  // set page title
  document.title = getPageTitle(to.meta.title);

  const store = userStore();

  // determine whether the user has logged in
  const hasToken = store.loginToken

  alert("has token!" + hasToken)

  if (hasToken) {
    if (to.path === '/login' || to.path === '/register') {
      // if is logged in, redirect to the home page
      NProgress.done(); // hack: https://github.com/PanJiaChen/vue-element-admin/pull/2939
      next({ path: '/' });
    } else {

      alert("go this!")
      const accessRoutes = await permissionStore().generateRoutes(['admin']);
      accessRoutes.forEach(item => {
        router.addRoute(item);
      });
      next({ ...to, replace: true });

      // determine whether the user has obtained his permission roles through getInfo
      // const hasRoles = userStore().roles && userStore().roles.length > 0;
      // const hasRoles = store.user?.role.length > 0;
      // // console.log('hasRoles=', hasRoles);
      // if (hasRoles) {
      //   next();
      // } else {
      //   try {
      //     // get user info
      //     // note: roles must be a object array! such as: ['admin'] or ,['developer','editor']
      //     // eslint-disable-next-line @typescript-eslint/no-explicit-any
          
      //     let roles: string[] = [];

      //     if (store.user.role) {
      //       roles = [store.user.role];
      //     }

      //     // generate accessible routes map based on roles
      //     const accessRoutes = await permissionStore().generateRoutes(roles);
      //     // console.log('accessRoutes=', accessRoutes)

      //     // dynamically add accessible routes
      //     // router.addRoutes(accessRoutes);
      //     accessRoutes.forEach(item => {
      //       router.addRoute(item);
      //     });
      //     // console.log('next=', accessRoutes);

      //     // hack method to ensure that addRoutes is complete
      //     // set the replace: true, so the navigation will not leave a history record
      //     next({ ...to, replace: true });
      //   // eslint-disable-next-line @typescript-eslint/no-explicit-any
      //   } catch (error: any) {
      //     // remove token and go to login page to re-login
      //     await store.resetToken();
      //     ElMessage.error(error.message || 'Has Error');
      //     NProgress.done();
      //     next(`/login?redirect=${to.path}`);
      //   }
      // }
    }
  } else {
    /* has no token*/
    if (whiteList.indexOf(to.path) !== -1) {
      // in the free login whitelist, go directly
      next();
    } else {
      // other pages that do not have permission to access are redirected to the login page.
      NProgress.done();
      next(`/login?redirect=${to.path}`);
    }
  }
});

router.afterEach(() => {
  // finish progress bar
  NProgress.done();
});
